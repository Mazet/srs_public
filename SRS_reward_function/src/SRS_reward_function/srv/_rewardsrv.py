"""autogenerated by genmsg_py from rewardsrvRequest.msg. Do not edit."""
import roslib.message
import struct


class rewardsrvRequest(roslib.message.Message):
  _md5sum = "33c67ba0578c4d68e51d5f0be941a9b4"
  _type = "SRS_reward_function/rewardsrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string action_name
string action_stage

"""
  __slots__ = ['action_name','action_stage']
  _slot_types = ['string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       action_name,action_stage
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(rewardsrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_name is None:
        self.action_name = ''
      if self.action_stage is None:
        self.action_stage = ''
    else:
      self.action_name = ''
      self.action_stage = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.action_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_stage
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_stage = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.action_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_stage
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_stage = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from rewardsrvResponse.msg. Do not edit."""
import roslib.message
import struct


class rewardsrvResponse(roslib.message.Message):
  _md5sum = "94948230adee33385046647d728f7602"
  _type = "SRS_reward_function/rewardsrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 bestVarm
string armstate
float64 bestVhead
string headstate
float64 bestVtray
string traystate
float64 bestVsdh
string sdhstate
float64 bestVtorso
string torsostate


"""
  __slots__ = ['bestVarm','armstate','bestVhead','headstate','bestVtray','traystate','bestVsdh','sdhstate','bestVtorso','torsostate']
  _slot_types = ['float64','string','float64','string','float64','string','float64','string','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       bestVarm,armstate,bestVhead,headstate,bestVtray,traystate,bestVsdh,sdhstate,bestVtorso,torsostate
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(rewardsrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bestVarm is None:
        self.bestVarm = 0.
      if self.armstate is None:
        self.armstate = ''
      if self.bestVhead is None:
        self.bestVhead = 0.
      if self.headstate is None:
        self.headstate = ''
      if self.bestVtray is None:
        self.bestVtray = 0.
      if self.traystate is None:
        self.traystate = ''
      if self.bestVsdh is None:
        self.bestVsdh = 0.
      if self.sdhstate is None:
        self.sdhstate = ''
      if self.bestVtorso is None:
        self.bestVtorso = 0.
      if self.torsostate is None:
        self.torsostate = ''
    else:
      self.bestVarm = 0.
      self.armstate = ''
      self.bestVhead = 0.
      self.headstate = ''
      self.bestVtray = 0.
      self.traystate = ''
      self.bestVsdh = 0.
      self.sdhstate = ''
      self.bestVtorso = 0.
      self.torsostate = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_d.pack(self.bestVarm))
      _x = self.armstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVhead))
      _x = self.headstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVtray))
      _x = self.traystate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVsdh))
      _x = self.sdhstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVtorso))
      _x = self.torsostate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 8
      (self.bestVarm,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.armstate = str[start:end]
      start = end
      end += 8
      (self.bestVhead,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.headstate = str[start:end]
      start = end
      end += 8
      (self.bestVtray,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.traystate = str[start:end]
      start = end
      end += 8
      (self.bestVsdh,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sdhstate = str[start:end]
      start = end
      end += 8
      (self.bestVtorso,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.torsostate = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_d.pack(self.bestVarm))
      _x = self.armstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVhead))
      _x = self.headstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVtray))
      _x = self.traystate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVsdh))
      _x = self.sdhstate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.bestVtorso))
      _x = self.torsostate
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.bestVarm,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.armstate = str[start:end]
      start = end
      end += 8
      (self.bestVhead,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.headstate = str[start:end]
      start = end
      end += 8
      (self.bestVtray,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.traystate = str[start:end]
      start = end
      end += 8
      (self.bestVsdh,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sdhstate = str[start:end]
      start = end
      end += 8
      (self.bestVtorso,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.torsostate = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_d = struct.Struct("<d")
class rewardsrv(roslib.message.ServiceDefinition):
  _type          = 'SRS_reward_function/rewardsrv'
  _md5sum = '35c11fe2c18aee380e26784551227a30'
  _request_class  = rewardsrvRequest
  _response_class = rewardsrvResponse
